<?xml version="1.0" encoding="utf-8"?>
<project>

	<meta title="HxmakerOpenfl" package="com.sample.hxmakeropenfl" version="1.0.0"
		company="Company Name" />
	<app main="Main" path="Export" file="HxmakerOpenfl" />

	<!-- <window width="800" height="600" fps="61" /> -->

	<source path="Source" />

	<haxelib name="openfl" />

	<haxedef name="gl_stats" />

	<!-- 引擎盖上的游戏引擎 -->
	<haxelib name="hxmaker-openfl" />

	<assets path="Assets" rename="assets" embed="false" />

	<config:android gradle-version="7.4.2" />
	<config:android gradle-plugin="7.3.1" />

	<!-- 即使在发布模式下，也要在最终二进制文件中添加符号，允许通过ndk-stack读取崩溃的错误位置，性能影响：无 -->
	<define name="HXCPP_DEBUG_LINK" />
	<define name="HXCPP_TELEMETRY" if="telemetry" />
	<!--
	即使在发布模式下，也具有有效的功能级堆栈跟踪，此定义将允许您在抛出异常或直接查询堆栈时获得包含函数名称的haxe栈追踪。启用此定义时，每次函数调用都会产生少量开销。运行时性能影响：非常小。-->
	<define name="HXCPP_STACK_TRACE" />
	<!-- 即使在发布模式下，也将行信息包括在堆栈跟踪中，并将行号添加到函数名中。每行haxe代码都有额外的开销，运行时性能受到影响：从小到中。 -->
	<define name="HXCPP_STACK_LINE" />
	<!-- 此定义显式检查指针是否为空访问并引发信息异常，而不仅仅是崩溃。每个成员访问都有开销,运行时性能打击：小 -->
	<define name="HXCPP_CHECK_POINTER" />
	<!-- HXCPP_PROFILER 性能检测器 -->
	<define name="HXCPP_PROFILER" if="telemetry" />

</project>